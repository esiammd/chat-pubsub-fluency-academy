Full Stack: Backend > Frontend

# Publish Subscriber Multi-User System with Authorization and Authentication


---
# Description
---

Implement multi-user chat system using asynchronous [pub/sub](https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern) pattern. Each user should be authenticated and authorized to receive certain messages in a system. 

There are 4 abstract authorization levels: `A`, `B`, `C`, `D` where: $D \sub C \sub B \sub A$ inclusively. Therefore, user level `C` can see level `C` and `D` messages, user level `A` can see everyones' messages.

Each user before sending/receiving a message should prove his/her identity via authentication. Authentication should be implemented via JWT.


---
# Objective
---

The primary target of the task is to evaluate candidate's ability to reason about systems, knowledge of common patterns and solutions, software development skills.

Since this is a position for mid and upper developers it is required to not use any high level libraries which abstract away authentication or pub/sub.

Keep the system simple, there is no need to make it overly complex, however the core part must work reliably, be performant, not leaking memory in a long run, free of data races and deadlocks.


---
# Outcome
---

On a product side of an outcome a simple single page chat application should be shipped. Chat should meet requirements from Description section. A testing user should be able to create a user of a certain authorization level, log in, send and receive messages meeting auth constraints.

For the **backend** solution any language with support of parallelism and concurrency can be used. We use Go and suggest to use it.

For the **frontend** React should be used. Frontend should be functional enough to use an application, however no advanced features are needed. E.g. message polling could be done manually via button click.